package main

import (
	"fmt"
	"net/http"
	"os"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/namsral/flag"
	"github.com/stianeikeland/go-rpio"

	// docs is generated by Swag CLI, you have to import it.
	_ "plug-go/docs"
	echoSwagger "github.com/swaggo/echo-swagger"
)

var (
	port uint

	pinMap = map[string]rpio.Pin{
		"light1on": rpio.Pin(19),
		"light1off": rpio.Pin(26),
	}
)

func readAndValidateConfig() {
	flag.UintVar(&port, "port", 8080, "Port to serve api on")
	flag.Parse()
}

func togglePin(toggle string) {
	pinMap[toggle].High()
	time.Sleep(time.Second)
	pinMap[toggle].Low()
}

// @title Plug-Go
// @version 1.0
// @description Simple API to turn lights on and off using raspberry pi pins.
// @termsOfService http://swagger.io/terms/
// @contact.name Brian Kulyk
// @contact.url https://github.com/bkulyk/plug-go
// @contact.email support@swagger.io
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8080
// @BasePath /
func main() {
	if err := rpio.Open(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	defer rpio.Close()

	for key, pin := range pinMap {
		fmt.Printf("Set pin for output %s\n", key)
		pin.Output()
	}

	readAndValidateConfig()

	e := echo.New()
	e.HideBanner = true

	e.Use(middleware.Recover())
	e.GET("/toggle", toggleHandler)
	e.GET("/swagger/*", echoSwagger.WrapHandler)
	e.Static("/", "static")

	e.Logger.Fatal(e.Start(fmt.Sprintf(":%d", port)))
}

// @Summary toggle a pin to high for a second to turn on/off a light
// @Description toggle a pin to high for a second to turn on/off a light
// @Accept application/plaintext
// @Produce html
// @Param   toggle    query   string     true  "friendly name of the light to toggle"
// @Success 302
// @Router /toggle [get]
func toggleHandler(c echo.Context) error {
	pin := c.QueryParam("pin")
	togglePin(pin)
	return c.Redirect(http.StatusTemporaryRedirect, fmt.Sprintf("/?pin=%s", pin))
}
